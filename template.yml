AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless API with manual API Gateway configuration and API Key support

Parameters:
  JwtSecret:
    Type: String
    NoEcho: true
    Description: "Secret used to sign JWTs"

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs22.x
    MemorySize: 128
    Environment:
      Variables:
        DYNAMODB_TABLE: UsersTable
        JWT_SECRET: !Ref JwtSecret

Resources:

  ##############################
  # DYNAMODB
  ##############################
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UsersTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ##############################
  # API GATEWAY - MANUAL
  ##############################
  MyRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApi
  
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      DeploymentId: !Ref MyDeploymentV3
      RestApiId: !Ref MyRestApi
      Description: version 1.0.0

  MeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyRestApi.RootResourceId
      PathPart: me
      RestApiId: !Ref MyRestApi

  RegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyRestApi.RootResourceId
      PathPart: register
      RestApiId: !Ref MyRestApi

  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyRestApi.RootResourceId
      PathPart: login
      RestApiId: !Ref MyRestApi

  StatsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyRestApi.RootResourceId
      PathPart: stats
      RestApiId: !Ref MyRestApi

  MyDeploymentV3:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RegisterMethod
      - LoginMethod
      - MeMethod
      - StatsMethod
    Properties:
      RestApiId: !Ref MyRestApi
      Description: v1.0.0

  ##############################
  # USAGE PLAN + API KEY
  ##############################
  StatsApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: StatsAPIKey
      Enabled: true

  StatsUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiStage
    Properties:
      UsagePlanName: StatsUsagePlan
      ApiStages:
        - ApiId: !Ref MyRestApi
          Stage: Prod
      Throttle:
        RateLimit: 1
        BurstLimit: 1
      Quota:
        Limit: 1000
        Period: MONTH

  StatsUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref StatsApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref StatsUsagePlan

  ##############################
  # AUTHORIZER FUNCTION
  ##############################
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dist
      Handler: utils/auth.handler

  LambdaAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: LambdaRequestAuthorizer
      RestApiId: !Ref MyRestApi
      Type: REQUEST
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
        - { Arn: !GetAtt AuthorizerFunction.Arn }
      IdentitySource: method.request.header.Authorization

  ##############################
  # LAMBDA FUNCTIONS
  ##############################
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dist
      Handler: handlers/register.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action: 
                - dynamodb:PutItem
                - dynamodb:Query
              Resource: 
                - !GetAtt UsersTable.Arn
                - !Sub "${UsersTable.Arn}/index/EmailIndex"

  RegisterMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref RegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestValidatorId: !Ref BodyValidator
      RequestModels:
        application/json: !Ref RegisterModel
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt RegisterFunction.Arn }

  RegisterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref RegisterResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dist
      Handler: handlers/login.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
              Resource:
                - !GetAtt UsersTable.Arn
                - !Sub "${UsersTable.Arn}/index/EmailIndex"

  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref LoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestValidatorId: !Ref BodyValidator
      RequestModels:
        application/json: !Ref LoginModel
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt LoginFunction.Arn }

  LoginOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref LoginResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  MeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dist
      Handler: handlers/me.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt UsersTable.Arn

  MeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref MeResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt MeFunction.Arn }

  MeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref MeResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  StatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dist
      Handler: handlers/stats.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action: dynamodb:Scan
              Resource: !GetAtt UsersTable.Arn

  StatsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref StatsResource
      HttpMethod: GET
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt StatsFunction.Arn }

  StatsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref StatsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ##############################
  # VALIDATION
  ##############################
  BodyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref MyRestApi
      Name: ValidateBody
      ValidateRequestBody: true
      ValidateRequestParameters: false

  LoginModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref MyRestApi
      ContentType: application/json
      Name: LoginModel
      Schema:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            pattern: '^[^@\s]+@[^@\s]+\.[^@\s]+$'
          password:
            type: string
            minLength: 6

  RegisterModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref MyRestApi
      ContentType: application/json
      Name: RegisterModel
      Schema:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            pattern: '^[^@\s]+@[^@\s]+\.[^@\s]+$'
          password:
            type: string
            minLength: 6
          firstname:
            type: string
          lastname:
            type: string

  ##############################
  # PERMISSIONS
  ##############################
  LambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/authorizers/*

  RegisterInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RegisterFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/Prod/POST/register

  LoginInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LoginFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/Prod/POST/login

  MeInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MeFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/*/*/*

  StatsInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StatsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/Prod/GET/stats

  ##############################
  # BILLING ALARM
  ##############################
  BillingAlarmSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: BillingAlarmTopic
      Subscription:
        - Protocol: email
          Endpoint: onurbozova@gmail.com

  BillingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: MonthlyBillingThresholdExceeded
      Namespace: AWS/Billing
      MetricName: EstimatedCharges
      Dimensions:
        - Name: Currency
          Value: USD
      Statistic: Maximum
      Period: 21600
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: BillingAlarmSNSTopic
      TreatMissingData: notBreaching

Outputs:
  ApiUrl:
    Description: API Gateway endpoint
    Value: !Sub "https://${MyRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
