AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless API with manual API Gateway configuration and API Key support

Parameters:
  JwtSecret:
    Type: String
    NoEcho: true
    Description: "Secret used to sign JWTs"

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs22.x
    MemorySize: 128
    Environment:
      Variables:
        DYNAMODB_TABLE: UsersTable
        JWT_SECRET: !Ref JwtSecret

Resources:

  ##############################
  # DYNAMODB
  ##############################
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UsersTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ##############################
  # API GATEWAY - FULL MANUAL
  ##############################
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyApi
      StageName: Prod
      Auth:
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn

  ##############################
  # API KEY + USAGE PLAN
  ##############################
  StatsApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: StatsAPIKey
      Enabled: true
      StageKeys:
        - RestApiId: !Ref MyApi
          StageName: Prod

  StatsUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: StatsUsagePlan
      ApiStages:
        - ApiId: !Ref MyApi
          Stage: Prod
      Throttle:
        RateLimit: 1
        BurstLimit: 1
      Quota:
        Limit: 1000
        Period: MONTH

  StatsUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref StatsApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref StatsUsagePlan

  ##############################
  # LAMBDAS
  ##############################
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/register.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt UsersTable.Arn
      Events:
        RegisterApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /register
            Method: post

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/login.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
              Resource:
                - !GetAtt UsersTable.Arn
                - !Sub "${UsersTable.Arn}/index/EmailIndex"
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /login
            Method: post

  MeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/me.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt UsersTable.Arn
      Events:
        MeApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /me
            Method: get
            Auth:
              Authorizer: LambdaRequestAuthorizer

  StatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/stats.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:Scan
              Resource: !GetAtt UsersTable.Arn
      Events:
        StatsApi:
          Type: Api
          Properties:
            Path: /stats
            Method: get
            RestApiId: !Ref MyApi
            ApiKeyRequired: true

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: utils/auth.handler

  ##############################
  # LAMBDA PERMISSIONS
  ##############################
  PermissionForStatsInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StatsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/GET/stats

  PermissionForAuthorizerInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/GET/me

  ##############################
  # BILLING ALARM
  ##############################
  BillingAlarmSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: BillingAlarmTopic
      Subscription:
        - Protocol: email
          Endpoint: onurbozova@gmail.com

  BillingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: MonthlyBillingThresholdExceeded
      Namespace: AWS/Billing
      MetricName: EstimatedCharges
      Dimensions:
        - Name: Currency
          Value: USD
      Statistic: Maximum
      Period: 21600
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: BillingAlarmSNSTopic
      TreatMissingData: notBreaching

Outputs:
  ApiUrl:
    Description: API Gateway endpoint
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
